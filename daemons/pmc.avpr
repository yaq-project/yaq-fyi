{
    "config": {
        "accel_gain": {
            "default": 0,
            "doc": "Acceleration Gain",
            "type": "float"
        },
        "acceleration": {
            "default": 70000,
            "doc": "Acceleration for the motor in steps/sec/sec",
            "type": "float"
        },
        "axis": {
            "default": 0,
            "doc": "Axis number for the individual motor in the controller",
            "type": "int"
        },
        "backlash": {
            "default": 1000,
            "doc": "Number of steps to exceed the destination when backlash correcting. Must be a positive integer as backlash correction only applies in one direction.",
            "type": "int"
        },
        "controller": {
            "default": 0,
            "doc": "Index of the controller in MCAPI",
            "type": "int"
        },
        "counts_per_mm": {
            "default": 58200,
            "doc": "Encoder counts per mm of travel",
            "type": "int"
        },
        "decel_gain": {
            "default": 0,
            "doc": "Deceleration Gain",
            "type": "float"
        },
        "delay_at_target": {
            "default": 0,
            "doc": "Delay At Target",
            "type": "float"
        },
        "derivative_gain": {
            "default": 6000,
            "doc": "Derivative Gain",
            "type": "float"
        },
        "derivative_sample": {
            "default": 0.001364,
            "doc": "Derivative Sample",
            "type": "float"
        },
        "enable": {
            "default": true,
            "doc": "Disable this daemon. The kind entry-point will not attempt to start this daemon.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "enable_backlash_correction": {
            "default": false,
            "doc": "Enable correction which sends the motor past its destination when travelling to higher mm values (lower step values)",
            "type": "boolean"
        },
        "encoder_scaling": {
            "default": 0,
            "doc": "Encoder Scaling",
            "type": "float"
        },
        "following_error": {
            "default": 0,
            "doc": "Following Error",
            "type": "float"
        },
        "gain": {
            "default": 2211,
            "doc": "Gain parameter",
            "type": "float"
        },
        "integral_gain": {
            "default": 0,
            "doc": "Integral Gain",
            "type": "float"
        },
        "integration_limit": {
            "default": 0,
            "doc": "Integration Limit",
            "type": "int"
        },
        "integration_option": {
            "default": 0,
            "doc": "Integration Option",
            "type": "int"
        },
        "limits": {
            "default": [
                -Infinity,
                Infinity
            ],
            "doc": "Configuration limits are strictly optional.",
            "items": "double",
            "origin": "has-limits",
            "type": "array"
        },
        "log_level": {
            "default": "info",
            "doc": "Set daemon log-level.",
            "origin": "is-daemon",
            "type": {
                "name": "level",
                "symbols": [
                    "debug",
                    "info",
                    "notice",
                    "warning",
                    "error",
                    "critical",
                    "alert",
                    "emergency"
                ],
                "type": "enum"
            }
        },
        "log_to_file": {
            "default": false,
            "doc": "Optionally force logging to a file.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "make": {
            "default": null,
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": null,
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "out_of_limits": {
            "default": "closest",
            "doc": "Control behavior of daemon when set_position is given a value outside of limits.",
            "name": "out_of_limits",
            "origin": "has-limits",
            "symbols": [
                "closest",
                "ignore",
                "error"
            ],
            "type": "enum"
        },
        "output_deadband": {
            "default": 0,
            "doc": "Output Deadband",
            "type": "float"
        },
        "output_offset": {
            "default": 0,
            "doc": "Output Offset",
            "type": "float"
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "origin": "is-daemon",
            "type": "int"
        },
        "position_deadband": {
            "default": 0,
            "doc": "Position Deadband",
            "type": "float"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "startup_behavior": {
            "default": "trust_driver",
            "doc": "Where to get the current position. If trust state, then it will use the position stored to state (if present)",
            "type": {
                "name": "startup",
                "symbols": [
                    "trust_driver",
                    "trust_state"
                ],
                "type": "enum"
            }
        },
        "tolerance": {
            "default": 20,
            "doc": "Tolerance in motor steps",
            "type": "int"
        },
        "units": {
            "default": "mm",
            "doc": "Units",
            "type": "string"
        },
        "update_rate": {
            "default": 0,
            "doc": "Update Rate",
            "type": "int"
        },
        "velocity": {
            "default": 11000,
            "dodoc": "Velocity of motion in steps/sec",
            "type": "float"
        },
        "velocity_gain": {
            "default": 0,
            "doc": "Velocity Gain",
            "type": "float"
        }
    },
    "doc": "Motor driver for motors from Precision MicroControl Corporation.\n",
    "hardware": [
        "pmc:dcx-pci100",
        "pmc:dcx-mc110"
    ],
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-pmc",
        "conda-forge": "https://anaconda.org/conda-forge/yaqd-pmc"
    },
    "links": {
        "bugtracker": "https://github.com/yaq-project/yaqd-pmc/issues",
        "example-configs": "https://github.com/yaq-project/yaqd-pmc/tree/main/example-yaq-configs/pmc",
        "manufacturer": "https://pmccorp.com/products/api.php",
        "source": "https://github.com/yaq-project/yaqd-pmc/"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "origin": "is-daemon",
            "request": [],
            "response": "boolean"
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_destination": {
            "doc": "Get current daemon destination.",
            "origin": "has-position",
            "request": [],
            "response": "double"
        },
        "get_limits": {
            "doc": "Get daemon limits.Limits will be the <a href='https://en.wikipedia.org/wiki/Intersection_(set_theory)'>intersection</a> of config limits and driver limits (when appliciable).",
            "origin": "has-limits",
            "request": [],
            "response": {
                "items": "double",
                "type": "array"
            }
        },
        "get_position": {
            "doc": "Get current daemon position.",
            "origin": "has-position",
            "request": [],
            "response": "double"
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_units": {
            "doc": "Get units of daemon. These units apply to the position and destination properties.",
            "origin": "has-position",
            "request": [],
            "response": [
                "null",
                "string"
            ]
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "origin": "is-daemon",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "in_limits": {
            "doc": "Check if a given position is within daemon limits.",
            "origin": "has-limits",
            "request": [
                {
                    "name": "position",
                    "type": "double"
                }
            ],
            "response": "boolean"
        },
        "mm_to_steps": {
            "doc": "Convert mm travel to motor steps",
            "request": [
                {
                    "doc": "mm of travel",
                    "name": "mm",
                    "type": "float"
                }
            ],
            "response": "int"
        },
        "reset_to_known_position": {
            "doc": "Reset the represented position to a known actual position",
            "request": [
                {
                    "doc": "Current actual position in mm",
                    "name": "position",
                    "type": "float"
                }
            ],
            "response": "null"
        },
        "set_position": {
            "doc": "Give the daemon a new destination, and begin motion towards that destination.",
            "origin": "has-position",
            "request": [
                {
                    "name": "position",
                    "type": "double"
                }
            ],
            "response": "null"
        },
        "set_relative": {
            "doc": "Give the daemon a new destination relative to its current position. Daemon will immediately begin motion towards new destination. Returns new destination.",
            "origin": "has-position",
            "request": [
                {
                    "name": "distance",
                    "type": "double"
                }
            ],
            "response": "double"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "origin": "is-daemon",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "steps_to_mm": {
            "doc": "Convert motor steps to mm travel",
            "request": [
                {
                    "doc": "Number of motor steps",
                    "name": "steps",
                    "type": "int"
                }
            ],
            "response": "float"
        },
        "stop": {
            "doc": "Halt motion of the motor",
            "request": [],
            "response": "null"
        }
    },
    "properties": {
        "destination": {
            "control_kind": "hinted",
            "dynamic": true,
            "getter": "get_destination",
            "limits_getter": "get_limits",
            "options_getter": null,
            "record_kind": "data",
            "setter": "set_position",
            "type": "double",
            "units_getter": "get_units"
        },
        "position": {
            "control_kind": "hinted",
            "dynamic": true,
            "getter": "get_position",
            "limits_getter": "get_limits",
            "options_getter": null,
            "record_kind": "data",
            "setter": null,
            "type": "double",
            "units_getter": "get_units"
        }
    },
    "protocol": "pmc",
    "requires": [],
    "state": {
        "destination": {
            "default": NaN,
            "origin": "has-position",
            "type": "double"
        },
        "hw_limits": {
            "default": [
                0,
                50
            ],
            "items": "double",
            "origin": "has-limits",
            "type": "array"
        },
        "position": {
            "default": NaN,
            "origin": "has-position",
            "type": "double"
        }
    },
    "traits": [
        "has-limits",
        "has-position",
        "is-daemon"
    ],
    "types": [
        {
            "fields": [
                {
                    "name": "shape",
                    "type": {
                        "items": "int",
                        "type": "array"
                    }
                },
                {
                    "name": "typestr",
                    "type": "string"
                },
                {
                    "name": "data",
                    "type": "bytes"
                },
                {
                    "name": "version",
                    "type": "int"
                }
            ],
            "logicalType": "ndarray",
            "name": "ndarray",
            "type": "record"
        }
    ]
}